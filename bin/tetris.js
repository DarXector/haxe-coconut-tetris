// Generated by Haxe 3.4.2 (git build development @ e033003)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Tetris = function() { };
Tetris.__name__ = true;
Tetris.main = function() {
	var tmp = window.document.body;
	var this1 = { f : function() {
		return new tetris_data_GameModel();
	}};
	tmp.appendChild(coconut_ui_tools_ViewCache.mk("tetris.ui.TetrisView",null,tetris_ui_TetrisView.__init,{ gameBoard : O.auto(this1)}).toElement());
};
var coconut_data_Model = function() { };
coconut_data_Model.__name__ = true;
var vdom_Widget = function() {
	this.type = "Widget";
};
vdom_Widget.__name__ = true;
vdom_Widget.prototype = {
	init: function() {
		throw new js__$Boot_HaxeError("abstract");
	}
	,update: function(prev,elt) {
		throw new js__$Boot_HaxeError("abstract");
	}
	,destroy: function() {
	}
	,__class__: vdom_Widget
};
var coconut_vdom_Renderable = function(rendered,key) {
	vdom_Widget.call(this);
	this.__rendered = rendered;
	if(key == null) {
		key = vdom__$Attr_Key_$Impl_$.ofObj(this.__rendered);
	}
	this.key = key;
};
coconut_vdom_Renderable.__name__ = true;
coconut_vdom_Renderable.__super__ = vdom_Widget;
coconut_vdom_Renderable.prototype = $extend(vdom_Widget.prototype,{
	init: function() {
		this.__lastRender = O.get_value(this.__rendered);
		this.beforeInit();
		this.__dom = vdom_VDom.create(this.__lastRender);
		this.afterInit(this.__dom);
		this.__setupBinding();
		return this.__dom;
	}
	,__setupBinding: function() {
		var _gthis = this;
		this.__binding = O.bind(this.__rendered,null,function(next) {
			if(next != _gthis.__lastRender) {
				_gthis.__apply(next);
			}
		});
	}
	,__apply: function(next) {
		var changes = vdom_VDom.diff(this.__lastRender,next);
		this.beforePatching(this.__dom);
		this.__dom = vdom_VDom.patch(this.__dom,changes);
		this.__lastRender = next;
		this.afterPatching(this.__dom);
	}
	,toElement: function() {
		var _g = this.__dom;
		if(_g == null) {
			return this.init();
		} else {
			var v = _g;
			return v;
		}
	}
	,beforeInit: function() {
	}
	,afterInit: function(element) {
	}
	,beforePatching: function(element) {
	}
	,afterPatching: function(element) {
	}
	,update: function(x,y) {
		var _g = (x instanceof coconut_vdom_Renderable) ? x : null;
		if(_g != null) {
			var v = _g;
			this.__reuseRender(v);
		}
		return this.toElement();
	}
	,__reuseRender: function(that) {
		this.__dom = that.__dom;
		this.__lastRender = that.__lastRender;
		this.__apply(O.get_value(this.__rendered));
		this.__setupBinding();
		that.destroy();
	}
	,destroy: function() {
		var this1 = this.__binding;
		if(this1 != null) {
			this1.dissolve();
		}
		vdom_Widget.prototype.destroy.call(this);
	}
	,__class__: coconut_vdom_Renderable
});
var coconut_ui_View = function(render,pos) {
	this.id = coconut_ui_View.idCounter++;
	this.__coco__cache = new coconut_ui_tools_ViewCache();
	var _gthis = this;
	var this1 = { f : function() {
		return _gthis.__coco__cache.cached(render);
	}};
	coconut_vdom_Renderable.call(this,O.auto(this1));
};
coconut_ui_View.__name__ = true;
coconut_ui_View.__super__ = coconut_vdom_Renderable;
coconut_ui_View.prototype = $extend(coconut_vdom_Renderable.prototype,{
	__class__: coconut_ui_View
});
var tink_state_ObservableObject = function() { };
tink_state_ObservableObject.__name__ = true;
tink_state_ObservableObject.prototype = {
	__class__: tink_state_ObservableObject
};
var coconut_ui_tools_Slot = function(owner) {
	this.owner = owner;
};
coconut_ui_tools_Slot.__name__ = true;
coconut_ui_tools_Slot.__interfaces__ = [tink_state_ObservableObject];
coconut_ui_tools_Slot.prototype = {
	poll: function() {
		var _gthis = this;
		if(this.last == null) {
			if(this.data == null) {
				var this1 = new tink_core_MPair(null,new tink_core_FutureTrigger());
				this.last = this1;
			} else {
				var m = O.measure(this.data);
				var this2 = new tink_core_MPair(m.a,new tink_core_FutureTrigger());
				this.last = this2;
				this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
			}
			this.last.b.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
				_gthis.last = null;
			}));
		}
		var this3;
		var this4 = new tink_core_MPair(this.last.a,this.last.b);
		this3 = this4;
		return this3;
	}
	,observe: function() {
		return this;
	}
	,setData: function(data) {
		var _gthis = this;
		this.data = data;
		if(this.last != null) {
			var this1 = this.link;
			if(this1 != null) {
				this1.dissolve();
			}
			O.stack.push(null);
			var m = O.measure(data);
			O.stack.pop();
			var compare = function(after,before) {
				if(before != after) {
					_gthis.last.b.trigger(tink_core_Noise.Noise);
				} else {
					_gthis.link = m.b.handle(($_=_gthis.last.b,$bind($_,$_.trigger)));
				}
			};
			if(js_Boot.__instanceof(m.a,tink_state_ObservableObject)) {
				var nu = m.a;
				var old = this.last.a;
				compare(O.get_value(nu),O.get_value(old));
			} else {
				compare(m.a,this.last.a);
			}
		}
	}
	,toString: function() {
		return "Slot(" + Std.string(this.owner) + ")";
	}
	,__class__: coconut_ui_tools_Slot
};
var coconut_ui_tools__$ViewCache_Stack = function(create) {
	this.stored = [];
	this.counter = 0;
	this.create = create;
};
coconut_ui_tools__$ViewCache_Stack.__name__ = true;
coconut_ui_tools__$ViewCache_Stack.prototype = {
	purge: function() {
		this.stored.splice(this.counter,this.stored.length);
		this.counter = 0;
		return this.stored.length;
	}
	,poll: function(data) {
		var ret = this.create(data,this.stored[this.counter]);
		if(this.counter == this.stored.length) {
			this.stored[this.counter] = ret;
		}
		this.counter++;
		return ret;
	}
	,__class__: coconut_ui_tools__$ViewCache_Stack
};
var coconut_ui_tools__$ViewCache_Registry = function(create) {
	this.byObj = new haxe_ds_ObjectMap();
	this.byString = new haxe_ds_StringMap();
	this.create = create;
	this.keyless = new coconut_ui_tools__$ViewCache_Stack(create);
};
coconut_ui_tools__$ViewCache_Registry.__name__ = true;
coconut_ui_tools__$ViewCache_Registry.prototype = {
	purge: function() {
		this.keyless.purge();
		var m = this.byString;
		var remove = [];
		var k = m.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var stack = __map_reserved[k1] != null ? m.getReserved(k1) : m.h[k1];
			if(stack.purge() == 0) {
				remove.push(k1);
			}
		}
		var _g = 0;
		while(_g < remove.length) {
			var k2 = remove[_g];
			++_g;
			m.remove(k2);
		}
		var m1 = this.byObj;
		var remove1 = [];
		var k3 = m1.keys();
		while(k3.hasNext()) {
			var k4 = k3.next();
			var stack1 = m1.h[k4.__id__];
			if(stack1.purge() == 0) {
				remove1.push(k4);
			}
		}
		var _g1 = 0;
		while(_g1 < remove1.length) {
			var k5 = remove1[_g1];
			++_g1;
			m1.remove(k5);
		}
	}
	,poll: function(data,key) {
		var stack;
		if(key == null) {
			stack = this.keyless;
		} else if(typeof key === "string") {
			var m = this.byString;
			var key1 = key;
			var _g = __map_reserved[key1] != null ? m.getReserved(key1) : m.h[key1];
			if(_g == null) {
				var v = new coconut_ui_tools__$ViewCache_Stack(this.create);
				if(__map_reserved[key1] != null) {
					m.setReserved(key1,v);
				} else {
					m.h[key1] = v;
				}
				stack = v;
			} else {
				var v1 = _g;
				stack = v1;
			}
		} else {
			var m1 = this.byObj;
			var _g1 = m1.h[key.__id__];
			if(_g1 == null) {
				var v2 = new coconut_ui_tools__$ViewCache_Stack(this.create);
				m1.set(key,v2);
				stack = v2;
			} else {
				var v3 = _g1;
				stack = v3;
			}
		}
		return stack.poll(data);
	}
	,__class__: coconut_ui_tools__$ViewCache_Registry
};
var coconut_ui_tools_ViewCache = function() {
	this.__cache = new haxe_ds_StringMap();
};
coconut_ui_tools_ViewCache.__name__ = true;
coconut_ui_tools_ViewCache.mk = function(cls,key,make,data) {
	var _this;
	var _g = coconut_ui_tools_ViewCache.stack;
	if(_g.length == 0) {
		_this = new coconut_ui_tools_ViewCache();
	} else {
		var v = _g;
		_this = v[v.length - 1][0];
	}
	var _g1 = _this.__cache.get(cls);
	var tmp;
	if(_g1 == null) {
		var this1 = _this.__cache;
		var v1 = new coconut_ui_tools__$ViewCache_Registry(make);
		this1.set(cls,v1);
		tmp = v1;
	} else {
		var v2 = _g1;
		tmp = v2;
	}
	return tmp.poll(data,key);
};
coconut_ui_tools_ViewCache.prototype = {
	cached: function(f) {
		if(coconut_ui_tools_ViewCache.stack.length > 0 && coconut_ui_tools_ViewCache.stack[coconut_ui_tools_ViewCache.stack.length - 1][0] == this) {
			return f();
		}
		var this1;
		var this2 = new Array(1);
		this1 = this2;
		var ret = this1;
		ret[0] = this;
		var entry = ret;
		coconut_ui_tools_ViewCache.stack.push(entry);
		var ret1;
		try {
			ret1 = tink_core_Outcome.Success(f());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			ret1 = tink_core_Outcome.Failure(e);
		}
		HxOverrides.remove(coconut_ui_tools_ViewCache.stack,entry);
		var f1 = this.__cache.iterator();
		while(f1.hasNext()) {
			var f2 = f1.next();
			f2.purge();
		}
		return tink_core_OutcomeTools.sure(ret1);
	}
	,__class__: coconut_ui_tools_ViewCache
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var tetris_data_Constants = function() { };
tetris_data_Constants.__name__ = true;
var tetris_data_GameModel = function(initial) {
	var _gthis = this;
	if(initial == null) {
		initial = { };
	}
	var _g = initial.piece;
	var tmp;
	if(_g == null) {
		tmp = tink_state__$State_State_$Impl_$.ofConstant(null);
	} else {
		var v = _g;
		tmp = tink_state__$State_State_$Impl_$.ofConstant(v);
	}
	this.__coco_piece = tmp;
	var _g1 = initial.queuedPiece;
	var tmp1;
	if(_g1 == null) {
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(this.getQuedPiece());
	} else {
		var v1 = _g1;
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(v1);
	}
	this.__coco_queuedPiece = tmp1;
	var _g2 = initial.gameState;
	var tmp2;
	if(_g2 == null) {
		tmp2 = tink_state__$State_State_$Impl_$.ofConstant(tetris_data_GameState.Start);
	} else {
		var v2 = _g2;
		tmp2 = tink_state__$State_State_$Impl_$.ofConstant(v2);
	}
	this.__coco_gameState = tmp2;
	var _g3 = initial.lockedBoard;
	var tmp3;
	if(_g3 == null) {
		tmp3 = tink_state__$State_State_$Impl_$.ofConstant(tetris_data_GameModel.getBoardList(tetris_data_GameModel.getEmptyBoard(tetris_data_Constants.BOARD_WIDTH,tetris_data_Constants.BOARD_HEIGHT)));
	} else {
		var v3 = _g3;
		tmp3 = tink_state__$State_State_$Impl_$.ofConstant(v3);
	}
	this.__coco_lockedBoard = tmp3;
	var _g4 = initial.score;
	var tmp4;
	if(_g4 == null) {
		tmp4 = tink_state__$State_State_$Impl_$.ofConstant(0);
	} else {
		var v4 = _g4;
		tmp4 = tink_state__$State_State_$Impl_$.ofConstant(v4);
	}
	this.__coco_score = tmp4;
	var this1 = { f : function() {
		var this2 = _gthis.get_piece();
		return _gthis.setPiece(this2);
	}};
	this.__coco_board = O.auto(this1);
	var this3 = { f : function() {
		var __tmp = [];
		var _g5 = new tink_pure_NodeIterator(_gthis.get_queuedPiece().get_shape().get_blocks());
		while(_g5.list.length > 0) {
			var next = _g5.list.pop();
			var _g6 = -next.tails.length;
			while(_g6 < 0) {
				var i = _g6++;
				_g5.list.push(next.tails[-i - 1]);
			}
			var v5 = next.value;
			return v5;
		}
		return tink_pure__$List_List_$Impl_$.fromArray(__tmp);
	}};
	this.__coco_queuedBlock = O.auto(this3);
	this.__coco_frameTimer = tink_state__$State_State_$Impl_$.ofConstant(new haxe_Timer(tetris_data_Constants.FRAME_TIME));
	var this4 = new tink_state__$State_StateObject(0);
	this.__coco_transitionCount = this4;
	this.errorTrigger = tink_core__$Signal_Signal_$Impl_$.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { piece : this.__coco_piece, queuedPiece : this.__coco_queuedPiece, gameState : this.__coco_gameState, lockedBoard : this.__coco_lockedBoard, score : this.__coco_score, board : this.__coco_board, queuedBlock : this.__coco_queuedBlock, frameTimer : this.__coco_frameTimer, isInTransition : O.map(this.__coco_transitionCount,tink_state__$Observable_Transform_$Impl_$.plain(function(c) {
		return c > 0;
	}))};
};
tetris_data_GameModel.__name__ = true;
tetris_data_GameModel.__interfaces__ = [coconut_data_Model];
tetris_data_GameModel.getEmptyBoard = function(width,height) {
	var __tmp = [];
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		var __tmp1 = [];
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			__tmp1.push("");
		}
		__tmp.push(__tmp1);
	}
	return __tmp;
};
tetris_data_GameModel.getBoardArray = function(board) {
	var __tmp = [];
	var _g = new tink_pure_NodeIterator(board);
	while(_g.list.length > 0) {
		var next = _g.list.pop();
		var _g1 = -next.tails.length;
		while(_g1 < 0) {
			var i = _g1++;
			_g.list.push(next.tails[-i - 1]);
		}
		var rows = next.value;
		var __tmp1 = [];
		var _g2 = new tink_pure_NodeIterator(rows);
		while(_g2.list.length > 0) {
			var next1 = _g2.list.pop();
			var _g3 = -next1.tails.length;
			while(_g3 < 0) {
				var i1 = _g3++;
				_g2.list.push(next1.tails[-i1 - 1]);
			}
			var v = next1.value;
			__tmp1.push(v);
		}
		__tmp.push(__tmp1);
	}
	return __tmp;
};
tetris_data_GameModel.getBoardList = function(board) {
	var __tmp = [];
	var _g = 0;
	while(_g < board.length) {
		var row = board[_g];
		++_g;
		__tmp.push(tink_pure__$List_List_$Impl_$.fromArray(row));
	}
	return tink_pure__$List_List_$Impl_$.fromArray(__tmp);
};
tetris_data_GameModel.isOutOfBounds = function(x,y) {
	if(!(x < 0 || x >= tetris_data_Constants.BOARD_WIDTH || y < 0)) {
		return y >= tetris_data_Constants.BOARD_HEIGHT;
	} else {
		return true;
	}
};
tetris_data_GameModel.prototype = {
	start: function() {
		var _gthis = this;
		_gthis.reset();
		_gthis.startTimer();
		_gthis.newPiece();
		_gthis.queuePiece();
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ gameState : tetris_data_GameState.InProgress}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,reset: function() {
		var _gthis = this;
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ lockedBoard : tetris_data_GameModel.getBoardList(tetris_data_GameModel.getEmptyBoard(tetris_data_Constants.BOARD_WIDTH,tetris_data_Constants.BOARD_HEIGHT)), score : 0}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,newPiece: function() {
		var _gthis = this;
		if(_gthis.get_queuedPiece() == null) {
			_gthis.queuePiece();
		}
		var tmp = _gthis.get_queuedPiece();
		var tmp1 = tetris_data_Constants.BOARD_WIDTH / 2;
		var this1 = _gthis.get_queuedPiece().get_shape().get_blocks();
		tmp.set_position(new tetris_data_Point({ x : Math.floor(tmp1 - (this1 == null ? 0 : this1.length) / 2), y : 0}));
		var ret;
		var ret1 = _gthis.get_queuedPiece();
		var ret2 = _gthis.get_queuedPiece().get_position();
		var ret3 = _gthis.get_queuedPiece().get_rotation();
		if(_gthis.canPlace(ret1,ret2,ret3)) {
			ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ piece : _gthis.get_queuedPiece()}));
		} else {
			_gthis.playerLost();
			ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ }));
		}
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp2 = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp2);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,queuePiece: function(pshape) {
		var _gthis = this;
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ queuedPiece : _gthis.getQuedPiece(pshape)}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,getQuedPiece: function(pshape) {
		var shape = pshape == null ? tetris_data_Shapes.getRandom() : pshape;
		var pos = new tetris_data_Point({ x : 0, y : 0});
		return new tetris_data_Piece({ position : pos, shape : shape});
	}
	,rotate: function() {
		var _gthis = this;
		var newRotation = _gthis.get_piece().get_rotation() + 1;
		var this1 = _gthis.get_piece().get_shape().get_blocks();
		var newRotation1 = newRotation % (this1 == null ? 0 : this1.length);
		var tmp = _gthis.get_piece();
		var tmp1 = _gthis.get_piece().get_position();
		if(_gthis.canPlace(tmp,tmp1,newRotation1)) {
			_gthis.get_piece().set_rotation(newRotation1);
		}
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ piece : _gthis.get_piece()}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp2 = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp2);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,moveLeft: function() {
		var _gthis = this;
		var newPosition = _gthis.get_piece().get_position().clone();
		newPosition.offset(-1,0);
		var tmp = _gthis.get_piece();
		var tmp1 = _gthis.get_piece().get_rotation();
		if(_gthis.canPlace(tmp,newPosition,tmp1)) {
			_gthis.get_piece().set_position(newPosition);
		}
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ piece : _gthis.get_piece()}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp2 = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp2);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,moveRight: function() {
		var _gthis = this;
		var newPosition = _gthis.get_piece().get_position().clone();
		newPosition.offset(1,0);
		var tmp = _gthis.get_piece();
		var tmp1 = _gthis.get_piece().get_rotation();
		if(_gthis.canPlace(tmp,newPosition,tmp1)) {
			_gthis.get_piece().set_position(newPosition);
		}
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ piece : _gthis.get_piece()}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp2 = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp2);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,moveDown: function() {
		var _gthis = this;
		var piece = _gthis.get_piece();
		var newPosition = piece.get_position().clone();
		newPosition.offset(0,1);
		var ret;
		var ret1 = piece.get_rotation();
		if(_gthis.canPlace(piece,newPosition,ret1)) {
			piece.set_position(newPosition);
			ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ piece : piece}));
		} else {
			_gthis.lockIn(piece);
			_gthis.removeLines();
			_gthis.newPiece();
			_gthis.queuePiece();
			ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ }));
		}
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,lockIn: function(piece) {
		var _gthis = this;
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ lockedBoard : _gthis.setPiece(piece,true)}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,removeLines: function() {
		var _gthis = this;
		var board = tetris_data_GameModel.getBoardArray(_gthis.get_lockedBoard());
		var add = 0;
		var _g1 = 0;
		var _g = board.length;
		while(_g1 < _g) {
			var rowIndex = _g1++;
			var row = board[rowIndex];
			if(tetris_extensions_ArrayExt.every(row,function(block) {
				return block != "";
			})) {
				board.splice(rowIndex,1);
				var __tmp = [];
				var _g2 = 0;
				while(_g2 < row.length) {
					var v = row[_g2];
					++_g2;
					__tmp.push("");
				}
				board.unshift(__tmp);
				add += 100;
			}
		}
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ lockedBoard : tetris_data_GameModel.getBoardList(board), score : _gthis.get_score() + add}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v1 = o[2];
				_gthis.__cocoupdate(v1);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,playerLost: function() {
		var _gthis = this;
		_gthis.get_frameTimer().stop();
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ gameState : tetris_data_GameState.End}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,startTimer: function() {
		this.set_frameTimer(new haxe_Timer(tetris_data_Constants.FRAME_TIME));
		this.get_frameTimer().run = $bind(this,this.timedUpdate);
	}
	,timedUpdate: function() {
		this.moveDown();
	}
	,canPlace: function(piece,newPosition,newRotation) {
		var validSpace = true;
		var board = tetris_data_GameModel.getBoardArray(this.get_lockedBoard());
		piece.get_shape().foreEach(newRotation,newPosition,function(x,y,value) {
			if(value == 1 && (tetris_data_GameModel.isOutOfBounds(x,y) || board[y][x] != "")) {
				validSpace = false;
			}
		});
		return validSpace;
	}
	,setPiece: function(piece,locked) {
		if(locked == null) {
			locked = false;
		}
		var board = tetris_data_GameModel.getBoardArray(this.get_lockedBoard());
		if(piece != null) {
			piece.get_shape().foreEach(piece.get_rotation(),piece.get_position(),function(x,y,value) {
				if(value == 1) {
					board[y][x] = locked ? tetris_data_Constants.LOCKED_CSS_CLASS : piece.get_shape().get_className();
				}
			});
		}
		return tetris_data_GameModel.getBoardList(board);
	}
	,get_piece: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_piece);
	}
	,get_queuedPiece: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_queuedPiece);
	}
	,get_gameState: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_gameState);
	}
	,get_lockedBoard: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_lockedBoard);
	}
	,get_score: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_score);
	}
	,get_board: function() {
		return O.get_value(this.__coco_board);
	}
	,get_queuedBlock: function() {
		return O.get_value(this.__coco_queuedBlock);
	}
	,get_frameTimer: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_frameTimer);
	}
	,set_frameTimer: function(param) {
		this.__coco_frameTimer.set(param);
		return param;
	}
	,__cocoupdate: function(delta) {
		var this1 = { };
		var sparse = this1;
		var delta1 = delta;
		var _g = 0;
		var _g1 = Reflect.fields(delta1);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var this2;
			var this3 = new Array(1);
			this2 = this3;
			var ret = this2;
			ret[0] = delta1[k];
			sparse[k] = ret;
		}
		var delta2 = sparse;
		if(delta2.piece != null) {
			this.__coco_piece.set(delta2.piece[0]);
		}
		if(delta2.queuedPiece != null) {
			this.__coco_queuedPiece.set(delta2.queuedPiece[0]);
		}
		if(delta2.gameState != null) {
			this.__coco_gameState.set(delta2.gameState[0]);
		}
		if(delta2.lockedBoard != null) {
			this.__coco_lockedBoard.set(delta2.lockedBoard[0]);
		}
		if(delta2.score != null) {
			this.__coco_score.set(delta2.score[0]);
		}
	}
	,__class__: tetris_data_GameModel
};
var tetris_data_GameState = { __ename__ : true, __constructs__ : ["Start","InProgress","End"] };
tetris_data_GameState.Start = ["Start",0];
tetris_data_GameState.Start.toString = $estr;
tetris_data_GameState.Start.__enum__ = tetris_data_GameState;
tetris_data_GameState.InProgress = ["InProgress",1];
tetris_data_GameState.InProgress.toString = $estr;
tetris_data_GameState.InProgress.__enum__ = tetris_data_GameState;
tetris_data_GameState.End = ["End",2];
tetris_data_GameState.End.toString = $estr;
tetris_data_GameState.End.__enum__ = tetris_data_GameState;
var tetris_data_Piece = function(initial) {
	if(initial == null) {
		initial = { };
	}
	var _g = initial.rotation;
	var tmp;
	if(_g == null) {
		tmp = tink_state__$State_State_$Impl_$.ofConstant(0);
	} else {
		var v = _g;
		tmp = tink_state__$State_State_$Impl_$.ofConstant(v);
	}
	this.__coco_rotation = tmp;
	var _g1 = initial.position;
	var tmp1;
	if(_g1 == null) {
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(null);
	} else {
		var v1 = _g1;
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(v1);
	}
	this.__coco_position = tmp1;
	var _g2 = initial.shape;
	var tmp2;
	if(_g2 == null) {
		tmp2 = null;
	} else {
		var v2 = _g2;
		tmp2 = v2;
	}
	this.shape = tmp2;
	var this1 = new tink_state__$State_StateObject(0);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core__$Signal_Signal_$Impl_$.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { rotation : this.__coco_rotation, position : this.__coco_position, shape : O["const"](this.get_shape()), isInTransition : O.map(this.__coco_transitionCount,tink_state__$Observable_Transform_$Impl_$.plain(function(c) {
		return c > 0;
	}))};
};
tetris_data_Piece.__name__ = true;
tetris_data_Piece.__interfaces__ = [coconut_data_Model];
tetris_data_Piece.prototype = {
	get_rotation: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_rotation);
	}
	,set_rotation: function(param) {
		this.__coco_rotation.set(param);
		return param;
	}
	,get_position: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_position);
	}
	,set_position: function(param) {
		this.__coco_position.set(param);
		return param;
	}
	,get_shape: function() {
		return this.shape;
	}
	,__class__: tetris_data_Piece
};
var tetris_data_Point = function(initial) {
	if(initial == null) {
		initial = { };
	}
	var _g = initial.x;
	var tmp;
	if(_g == null) {
		tmp = tink_state__$State_State_$Impl_$.ofConstant(0);
	} else {
		var v = _g;
		tmp = tink_state__$State_State_$Impl_$.ofConstant(v);
	}
	this.__coco_x = tmp;
	var _g1 = initial.y;
	var tmp1;
	if(_g1 == null) {
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(0);
	} else {
		var v1 = _g1;
		tmp1 = tink_state__$State_State_$Impl_$.ofConstant(v1);
	}
	this.__coco_y = tmp1;
	var this1 = new tink_state__$State_StateObject(0);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core__$Signal_Signal_$Impl_$.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { x : this.__coco_x, y : this.__coco_y, isInTransition : O.map(this.__coco_transitionCount,tink_state__$Observable_Transform_$Impl_$.plain(function(c) {
		return c > 0;
	}))};
};
tetris_data_Point.__name__ = true;
tetris_data_Point.__interfaces__ = [coconut_data_Model];
tetris_data_Point.prototype = {
	offset: function(dx,dy) {
		var _gthis = this;
		var ret = tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success({ x : _gthis.get_x() + dx, y : _gthis.get_y() + dy}));
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				var tmp = tink_state__$State_State_$Impl_$.get_value(_gthis.__coco_transitionCount) - 1;
				_gthis.__coco_transitionCount.set(tmp);
			}
			switch(o[1]) {
			case 0:
				var v = o[2];
				_gthis.__cocoupdate(v);
				break;
			case 1:
				var e = o[2];
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorTrigger.handlers,e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state__$State_State_$Impl_$.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,clone: function() {
		return new tetris_data_Point({ x : this.get_x(), y : this.get_y()});
	}
	,get_x: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_x);
	}
	,get_y: function() {
		return tink_state__$State_State_$Impl_$.get_value(this.__coco_y);
	}
	,__cocoupdate: function(delta) {
		var this1 = { };
		var sparse = this1;
		var delta1 = delta;
		var _g = 0;
		var _g1 = Reflect.fields(delta1);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var this2;
			var this3 = new Array(1);
			this2 = this3;
			var ret = this2;
			ret[0] = delta1[k];
			sparse[k] = ret;
		}
		var delta2 = sparse;
		if(delta2.x != null) {
			this.__coco_x.set(delta2.x[0]);
		}
		if(delta2.y != null) {
			this.__coco_y.set(delta2.y[0]);
		}
	}
	,__class__: tetris_data_Point
};
var tetris_data_Shape = function(initial) {
	this.blocks = initial.blocks;
	this.className = initial.className;
	var this1 = new tink_state__$State_StateObject(0);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core__$Signal_Signal_$Impl_$.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { blocks : O["const"](this.get_blocks()), className : O["const"](this.get_className()), isInTransition : O.map(this.__coco_transitionCount,tink_state__$Observable_Transform_$Impl_$.plain(function(c) {
		return c > 0;
	}))};
};
tetris_data_Shape.__name__ = true;
tetris_data_Shape.__interfaces__ = [coconut_data_Model];
tetris_data_Shape.toList = function(blocks) {
	var __tmp = [];
	var _g = 0;
	while(_g < blocks.length) {
		var rotation = blocks[_g];
		++_g;
		var __tmp1 = [];
		var _g1 = 0;
		while(_g1 < rotation.length) {
			var row = rotation[_g1];
			++_g1;
			__tmp1.push(tink_pure__$List_List_$Impl_$.fromArray(row));
		}
		__tmp.push(tink_pure__$List_List_$Impl_$.fromArray(__tmp1));
	}
	return tink_pure__$List_List_$Impl_$.fromArray(__tmp);
};
tetris_data_Shape.prototype = {
	foreEach: function(rotationIndex,position,callback) {
		var posX = -1;
		var posY = -1;
		var __tmp = [];
		var _g = new tink_pure_NodeIterator(this.get_blocks());
		while(_g.list.length > 0) {
			var next = _g.list.pop();
			var _g1 = -next.tails.length;
			while(_g1 < 0) {
				var i = _g1++;
				_g.list.push(next.tails[-i - 1]);
			}
			var v = next.value;
			__tmp.push(v);
		}
		var rotation = __tmp[rotationIndex];
		var _g2 = new tink_pure_NodeIterator(rotation);
		while(_g2.list.length > 0) {
			var next1 = _g2.list.pop();
			var _g3 = -next1.tails.length;
			while(_g3 < 0) {
				var i1 = _g3++;
				_g2.list.push(next1.tails[-i1 - 1]);
			}
			var row = next1.value;
			++posY;
			posX = -1;
			var _g4 = new tink_pure_NodeIterator(row);
			while(_g4.list.length > 0) {
				var next2 = _g4.list.pop();
				var _g5 = -next2.tails.length;
				while(_g5 < 0) {
					var i2 = _g5++;
					_g4.list.push(next2.tails[-i2 - 1]);
				}
				var block = next2.value;
				++posX;
				callback(position.get_x() + posX,position.get_y() + posY,block);
			}
		}
	}
	,get_blocks: function() {
		return this.blocks;
	}
	,get_className: function() {
		return this.className;
	}
	,__class__: tetris_data_Shape
};
var tink_pure__$List_List_$Impl_$ = {};
tink_pure__$List_List_$Impl_$.__name__ = true;
tink_pure__$List_List_$Impl_$.fromArray = function(i) {
	var ret = null;
	var len = 0;
	var pos = i.length;
	while(pos-- > 0) ret = new tink_pure__$List_Node(++len,i[pos],ret == null ? tink_pure__$List_Node.EMPTY : [ret]);
	return ret;
};
var tink_pure__$List_Node = function(length,value,tails) {
	this.value = value;
	this.length = length;
	this.tails = tails == null ? tink_pure__$List_Node.EMPTY : tails;
	var _g = 0;
	var _g1 = this.tails;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x == null) {
			throw new js__$Boot_HaxeError("whaaaaa?");
		}
	}
};
tink_pure__$List_Node.__name__ = true;
tink_pure__$List_Node.prototype = {
	__class__: tink_pure__$List_Node
};
var tink_state__$State_StateObject = function(value,isEqual) {
	this.value = value;
	var tmp;
	if(isEqual == null) {
		tmp = function(a,b) {
			return a == b;
		};
	} else {
		var v = isEqual;
		tmp = v;
	}
	this.isEqual = tmp;
	this.arm();
};
tink_state__$State_StateObject.__name__ = true;
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
tink_state__$State_StateObject.prototype = {
	poll: function() {
		return this.next;
	}
	,arm: function() {
		this.trigger = new tink_core_FutureTrigger();
		var this1;
		var this2 = new tink_core_MPair(this.value,this.trigger);
		this1 = this2;
		this.next = this1;
	}
	,set: function(value) {
		if(!this.isEqual(value,this.value)) {
			this.value = value;
			var last = this.trigger;
			this.arm();
			last.trigger(tink_core_Noise.Noise);
		}
	}
	,__class__: tink_state__$State_StateObject
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
var tink_core_SignalTrigger = function() {
	var this1 = [];
	this.handlers = this1;
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	__class__: tink_core_SignalTrigger
};
var O = {};
O.__name__ = true;
O.get_value = function(this1) {
	return O.measure(this1).a;
};
O.map = function(this1,f) {
	return O.create(function() {
		var m = O.measure(this1);
		var this2;
		var this3 = new tink_core_MPair(f(m.a),m.b);
		this2 = this3;
		return this2;
	});
};
O.measure = function(this1) {
	var before = O.stack.first();
	O.stack.push(this1);
	var p = this1.poll();
	var _g = (before instanceof tink_state__$Observable_AutoObservable) ? before : null;
	if(_g != null) {
		var v = _g;
		p.b.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(v,v.invalidate)));
	}
	O.stack.pop();
	return p;
};
O.bind = function(this1,options,cb) {
	if(options == null) {
		var scheduled = false;
		var active = true;
		var updated = null;
		var link = null;
		var update = function() {
			if(active) {
				var next = O.measure(this1);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,next.a);
				scheduled = false;
				link = next.b.handle(updated);
			}
		};
		var doSchedule = function() {
			if(scheduled) {
				return;
			}
			scheduled = true;
			O.schedule(update);
		};
		updated = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule);
		doSchedule();
		var this2 = new tink_core__$Callback_SimpleLink(function() {
			if(active) {
				active = false;
				if(link != null) {
					link.dissolve();
				}
			}
		});
		return this2;
	} else if(options.direct == null) {
		var scheduled1 = false;
		var active1 = true;
		var updated1 = null;
		var link1 = null;
		var update1 = function() {
			if(active1) {
				var next1 = O.measure(this1);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,next1.a);
				scheduled1 = false;
				link1 = next1.b.handle(updated1);
			}
		};
		var doSchedule1 = function() {
			if(scheduled1) {
				return;
			}
			scheduled1 = true;
			O.schedule(update1);
		};
		updated1 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule1);
		doSchedule1();
		var this3 = new tink_core__$Callback_SimpleLink(function() {
			if(active1) {
				active1 = false;
				if(link1 != null) {
					link1.dissolve();
				}
			}
		});
		return this3;
	} else if(options.direct == false) {
		var scheduled2 = false;
		var active2 = true;
		var updated2 = null;
		var link2 = null;
		var update2 = function() {
			if(active2) {
				var next2 = O.measure(this1);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,next2.a);
				scheduled2 = false;
				link2 = next2.b.handle(updated2);
			}
		};
		var doSchedule2 = function() {
			if(scheduled2) {
				return;
			}
			scheduled2 = true;
			O.schedule(update2);
		};
		updated2 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule2);
		doSchedule2();
		var this4 = new tink_core__$Callback_SimpleLink(function() {
			if(active2) {
				active2 = false;
				if(link2 != null) {
					link2.dissolve();
				}
			}
		});
		return this4;
	} else {
		var link3 = null;
		var update3 = null;
		update3 = function(_) {
			var next3 = O.measure(this1);
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,next3.a);
			link3 = next3.b.handle(update3);
		};
		var update4 = update3;
		update4(tink_core_Noise.Noise);
		var this5 = new tink_core__$Callback_SimpleLink(function() {
			if(link3 != null) {
				link3.dissolve();
			}
		});
		return this5;
	}
};
O.schedule = function(f) {
	var _g = O.scheduled;
	if(_g == null) {
		f();
	} else {
		var v = _g;
		v.push(f);
		O.scheduleUpdate();
	}
};
O.scheduleUpdate = function() {
	if(!O.isScheduled) {
		O.isScheduled = true;
		if(O.hasRAF) {
			window.requestAnimationFrame(function(_) {
				O.scheduledRun();
			});
		} else {
			tink_core__$Callback_Callback_$Impl_$.defer(O.scheduledRun);
		}
	}
};
O.scheduledRun = function() {
	O.isScheduled = false;
	O.updatePending();
};
O.updatePending = function(maxSeconds) {
	if(maxSeconds == null) {
		maxSeconds = .01;
	}
	var end = new Date().getTime() / 1000 + maxSeconds;
	while(true) {
		var old = O.scheduled;
		O.scheduled = [null];
		var _g = 0;
		while(_g < old.length) {
			var o = old[_g];
			++_g;
			o();
		}
		O.scheduled.shift();
		if(!(O.scheduled.length > 0 && new Date().getTime() / 1000 < end)) {
			break;
		}
	}
	if(O.scheduled.length > 0) {
		O.scheduleUpdate();
		return true;
	} else {
		return false;
	}
};
O.create = function(f) {
	return new tink_state__$Observable_SimpleObservable(f);
};
O.auto = function(f) {
	return new tink_state__$Observable_AutoObservable(f);
};
O["const"] = function(value) {
	return new tink_state_ConstObservable(value);
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_state_ConstObservable = function(value) {
	var this1;
	var this2 = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	this1 = this2;
	this.m = this1;
};
tink_state_ConstObservable.__name__ = true;
tink_state_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state_ConstObservable.prototype = {
	poll: function() {
		return this.m;
	}
	,__class__: tink_state_ConstObservable
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_state__$Observable_SimpleObservable = function(f) {
	this._poll = f;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_SimpleObservable.prototype = {
	resetCache: function(_) {
		this.cache = null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw new js__$Boot_HaxeError("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw new js__$Boot_HaxeError("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
	,__class__: tink_state__$Observable_SimpleObservable
};
var tink_state__$Observable_AutoObservable = function(comp) {
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.trigger = new tink_core_FutureTrigger();
		var this1;
		var this2 = new tink_core_MPair(comp.f(),_gthis.trigger);
		this1 = this2;
		return this1;
	});
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	invalidate: function() {
		this.trigger.trigger(tink_core_Noise.Noise);
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var a1 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(a1);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	var this1 = function(r) {
		f();
	};
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_state__$Observable_Transform_$Impl_$ = {};
tink_state__$Observable_Transform_$Impl_$.__name__ = true;
tink_state__$Observable_Transform_$Impl_$.plain = function(f) {
	var this1 = f;
	return this1;
};
var tetris_data_Shapes = function() { };
tetris_data_Shapes.__name__ = true;
tetris_data_Shapes.getRandom = function() {
	var types = [tetris_data_Shapes.I,tetris_data_Shapes.J,tetris_data_Shapes.L,tetris_data_Shapes.O,tetris_data_Shapes.S,tetris_data_Shapes.T,tetris_data_Shapes.Z];
	return types[Math.floor(Math.random() * types.length)];
};
var tetris_extensions_ArrayExt = function() { };
tetris_extensions_ArrayExt.__name__ = true;
tetris_extensions_ArrayExt.every = function(arr,comparator) {
	var _g = 0;
	while(_g < arr.length) {
		var elem = arr[_g];
		++_g;
		if(!comparator(elem)) {
			return false;
		}
	}
	return true;
};
var tetris_ui_GameBoardView = function(data) {
	coconut_ui_View.call(this,$bind(this,this.render),{ fileName : "GameBoardView.hx", lineNumber : 17, className : "tetris.ui.GameBoardView", methodName : "new"});
	this.__slots = { gameBoard : new coconut_ui_tools_Slot(this)};
};
tetris_ui_GameBoardView.__name__ = true;
tetris_ui_GameBoardView.__init = function(attributes,inst) {
	if(inst == null) {
		inst = new tetris_ui_GameBoardView(attributes);
	}
	inst.__slots.gameBoard.setData(attributes.gameBoard);
	return inst;
};
tetris_ui_GameBoardView.__super__ = coconut_ui_View;
tetris_ui_GameBoardView.prototype = $extend(coconut_ui_View.prototype,{
	render: function() {
		var index = 0;
		var attr = { className : vdom__$Attr_ClassName_$Impl_$.ofString("game-board")};
		var _g = [];
		var _g1 = new tink_pure_NodeIterator(this.get_gameBoard().get_board());
		while(_g1.list.length > 0) {
			var next = _g1.list.pop();
			var _g2 = -next.tails.length;
			while(_g2 < 0) {
				var i = _g2++;
				_g1.list.push(next.tails[-i - 1]);
			}
			var row = next.value;
			var attr1 = { key : index};
			var _g11 = [];
			var _g21 = new tink_pure_NodeIterator(row);
			while(_g21.list.length > 0) {
				var next1 = _g21.list.pop();
				var _g3 = -next1.tails.length;
				while(_g3 < 0) {
					var i1 = _g3++;
					_g21.list.push(next1.tails[-i1 - 1]);
				}
				var block = next1.value;
				_g11.push(vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("td",{ key : index++, className : vdom__$Attr_ClassName_$Impl_$.ofString("game-block " + (block == "" ? "block-empty" : block))},null)]));
			}
			_g.push(vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("tr",attr1,[vdom__$VNode_VNode_$Impl_$.flatten(_g11)])]));
		}
		var children = [vdom__$VNode_VNode_$Impl_$.flatten(_g)];
		return vdom_VDom.h("table",attr,[vdom_VDom.h("tbody",{ },children)]);
	}
	,afterInit: function(_) {
		window.document.addEventListener("keydown",$bind(this,this._onKeyDown));
	}
	,_onKeyDown: function(e) {
		if(this.get_gameBoard().get_gameState() == tetris_data_GameState.Start) {
			this.get_gameBoard().start();
		} else if(this.get_gameBoard().get_gameState() == tetris_data_GameState.InProgress) {
			var _g = e.keyCode;
			switch(_g) {
			case 37:
				this.get_gameBoard().moveLeft();
				break;
			case 38:
				this.get_gameBoard().rotate();
				break;
			case 39:
				this.get_gameBoard().moveRight();
				break;
			case 40:
				this.get_gameBoard().moveDown();
				break;
			}
		}
	}
	,toString: function() {
		return "GameBoardView";
	}
	,get_gameBoard: function() {
		return O.get_value(this.__slots.gameBoard.observe());
	}
	,__class__: tetris_ui_GameBoardView
});
var tetris_ui_HUD = function(data) {
	coconut_ui_View.call(this,$bind(this,this.render),{ fileName : "HUD.hx", lineNumber : 13, className : "tetris.ui.HUD", methodName : "new"});
	this.__slots = { gameBoard : new coconut_ui_tools_Slot(this)};
};
tetris_ui_HUD.__name__ = true;
tetris_ui_HUD.__init = function(attributes,inst) {
	if(inst == null) {
		inst = new tetris_ui_HUD(attributes);
	}
	inst.__slots.gameBoard.setData(attributes.gameBoard);
	return inst;
};
tetris_ui_HUD.__super__ = coconut_ui_View;
tetris_ui_HUD.prototype = $extend(coconut_ui_View.prototype,{
	render: function() {
		var _gthis = this;
		var attr = { className : vdom__$Attr_ClassName_$Impl_$.ofString("hud")};
		var children;
		if(this.get_gameBoard().get_gameState() == tetris_data_GameState.Start) {
			children = vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("div",{ className : vdom__$Attr_ClassName_$Impl_$.ofString("score")},["Press any key to start"])]);
		} else {
			var attr1 = { className : vdom__$Attr_ClassName_$Impl_$.ofString("score")};
			var i = this.get_gameBoard().get_score();
			children = vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("div",attr1,["Score: ",i == null ? "null" : "" + i])]);
		}
		var this1 = { f : function() {
			return _gthis.get_gameBoard().get_queuedBlock();
		}};
		var children1 = coconut_ui_tools_ViewCache.mk("tetris.ui.Queued",null,tetris_ui_Queued.__init,{ queuedBlock : O.auto(this1)});
		var children2;
		if(this.get_gameBoard().get_gameState() == tetris_data_GameState.End) {
			var this2 = { f : function() {
				return _gthis.get_gameBoard();
			}};
			children2 = vdom__$VNode_VNode_$Impl_$.flatten([coconut_ui_tools_ViewCache.mk("tetris.ui.Modal",null,tetris_ui_Modal.__init,{ gameBoard : O.auto(this2)})]);
		} else {
			children2 = null;
		}
		return vdom_VDom.h("div",attr,[children,children1,children2]);
	}
	,toString: function() {
		return "HUD";
	}
	,get_gameBoard: function() {
		return O.get_value(this.__slots.gameBoard.observe());
	}
	,__class__: tetris_ui_HUD
});
var tetris_ui_Modal = function(data) {
	coconut_ui_View.call(this,$bind(this,this.render),{ fileName : "Modal.hx", lineNumber : 11, className : "tetris.ui.Modal", methodName : "new"});
	this.__slots = { gameBoard : new coconut_ui_tools_Slot(this)};
};
tetris_ui_Modal.__name__ = true;
tetris_ui_Modal.__init = function(attributes,inst) {
	if(inst == null) {
		inst = new tetris_ui_Modal(attributes);
	}
	inst.__slots.gameBoard.setData(attributes.gameBoard);
	return inst;
};
tetris_ui_Modal.__super__ = coconut_ui_View;
tetris_ui_Modal.prototype = $extend(coconut_ui_View.prototype,{
	render: function() {
		var _gthis = this;
		return vdom_VDom.h("div",{ className : vdom__$Attr_ClassName_$Impl_$.ofString("modal")},[vdom_VDom.h("p",{ },["Game over!"]),vdom_VDom.h("div",{ className : vdom__$Attr_ClassName_$Impl_$.ofString("lower")},[vdom_VDom.h("button",{ onclick : function(event) {
			_gthis.get_gameBoard().start();
		}},["RESTART"])])]);
	}
	,toString: function() {
		return "Modal";
	}
	,get_gameBoard: function() {
		return O.get_value(this.__slots.gameBoard.observe());
	}
	,__class__: tetris_ui_Modal
});
var tetris_ui_Queued = function(data) {
	coconut_ui_View.call(this,$bind(this,this.render),{ fileName : "Queued.hx", lineNumber : 11, className : "tetris.ui.Queued", methodName : "new"});
	this.__slots = { queuedBlock : new coconut_ui_tools_Slot(this)};
};
tetris_ui_Queued.__name__ = true;
tetris_ui_Queued.__init = function(attributes,inst) {
	if(inst == null) {
		inst = new tetris_ui_Queued(attributes);
	}
	inst.__slots.queuedBlock.setData(attributes.queuedBlock);
	return inst;
};
tetris_ui_Queued.__super__ = coconut_ui_View;
tetris_ui_Queued.prototype = $extend(coconut_ui_View.prototype,{
	render: function() {
		var index = 0;
		var attr = { className : vdom__$Attr_ClassName_$Impl_$.ofString("queued")};
		var _g = [];
		var _g1 = new tink_pure_NodeIterator(this.get_queuedBlock());
		while(_g1.list.length > 0) {
			var next = _g1.list.pop();
			var _g2 = -next.tails.length;
			while(_g2 < 0) {
				var i = _g2++;
				_g1.list.push(next.tails[-i - 1]);
			}
			var row = next.value;
			var attr1 = { key : index};
			var _g11 = [];
			var _g21 = new tink_pure_NodeIterator(row);
			while(_g21.list.length > 0) {
				var next1 = _g21.list.pop();
				var _g3 = -next1.tails.length;
				while(_g3 < 0) {
					var i1 = _g3++;
					_g21.list.push(next1.tails[-i1 - 1]);
				}
				var block = next1.value;
				_g11.push(vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("td",{ key : index++, className : vdom__$Attr_ClassName_$Impl_$.ofString("game-block " + (block == 0 ? "block-empty" : "shape"))},null)]));
			}
			_g.push(vdom__$VNode_VNode_$Impl_$.flatten([vdom_VDom.h("tr",attr1,[vdom__$VNode_VNode_$Impl_$.flatten(_g11)])]));
		}
		var children = [vdom__$VNode_VNode_$Impl_$.flatten(_g)];
		return vdom_VDom.h("table",attr,[vdom_VDom.h("tbody",{ },children)]);
	}
	,toString: function() {
		return "Queued";
	}
	,get_queuedBlock: function() {
		return O.get_value(this.__slots.queuedBlock.observe());
	}
	,__class__: tetris_ui_Queued
});
var tetris_ui_TetrisView = function(data) {
	coconut_ui_View.call(this,$bind(this,this.render),{ fileName : "TetrisView.hx", lineNumber : 12, className : "tetris.ui.TetrisView", methodName : "new"});
	this.__slots = { gameBoard : new coconut_ui_tools_Slot(this)};
};
tetris_ui_TetrisView.__name__ = true;
tetris_ui_TetrisView.__init = function(attributes,inst) {
	if(inst == null) {
		inst = new tetris_ui_TetrisView(attributes);
	}
	inst.__slots.gameBoard.setData(attributes.gameBoard);
	return inst;
};
tetris_ui_TetrisView.__super__ = coconut_ui_View;
tetris_ui_TetrisView.prototype = $extend(coconut_ui_View.prototype,{
	render: function() {
		var _gthis = this;
		var attr = { className : vdom__$Attr_ClassName_$Impl_$.ofString("game")};
		var this1 = { f : function() {
			return _gthis.get_gameBoard();
		}};
		var children = coconut_ui_tools_ViewCache.mk("tetris.ui.HUD",null,tetris_ui_HUD.__init,{ gameBoard : O.auto(this1)});
		var this2 = { f : function() {
			return _gthis.get_gameBoard();
		}};
		return vdom_VDom.h("div",attr,[children,coconut_ui_tools_ViewCache.mk("tetris.ui.GameBoardView",null,tetris_ui_GameBoardView.__init,{ gameBoard : O.auto(this2)})]);
	}
	,toString: function() {
		return "TetrisView";
	}
	,get_gameBoard: function() {
		return O.get_value(this.__slots.gameBoard.observe());
	}
	,__class__: tetris_ui_TetrisView
});
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	dissolve: function() {
		if(this.f != null) {
			this.f();
		}
	}
	,__class__: tink_core__$Callback_SimpleLink
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	clear: function() {
		this.list = null;
		this.cb = null;
	}
	,dissolve: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
var tink_core_TypedError = function() {
	this.isTinkError = true;
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Noise = { __ename__ : true, __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.toString = $estr;
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		var failure = outcome[2];
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw new js__$Boot_HaxeError(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
var tink_pure_NodeIterator = function(node) {
	this.list = [];
	if(node != null) {
		this.list.push(node);
	}
};
tink_pure_NodeIterator.__name__ = true;
tink_pure_NodeIterator.prototype = {
	hasNext: function() {
		return this.list.length > 0;
	}
	,next: function() {
		var next = this.list.pop();
		var _g = -next.tails.length;
		while(_g < 0) {
			var i = _g++;
			this.list.push(next.tails[-i - 1]);
		}
		return next.value;
	}
	,__class__: tink_pure_NodeIterator
};
var tink_state__$State_State_$Impl_$ = {};
tink_state__$State_State_$Impl_$.__name__ = true;
tink_state__$State_State_$Impl_$.get_value = function(this1) {
	return O.get_value(this1);
};
tink_state__$State_State_$Impl_$.ofConstant = function(value) {
	var this1 = new tink_state__$State_StateObject(value);
	return this1;
};
var vdom__$Attr_ClassName_$Impl_$ = {};
vdom__$Attr_ClassName_$Impl_$.__name__ = true;
vdom__$Attr_ClassName_$Impl_$.ofString = function(s) {
	var this1 = StringTools.trim(s);
	return this1;
};
var vdom__$Attr_Key_$Impl_$ = {};
vdom__$Attr_Key_$Impl_$.__name__ = true;
vdom__$Attr_Key_$Impl_$.ofObj = function(v) {
	if(v == null) {
		return null;
	}
	var o = v;
	if(o.__vdomKey__ == null) {
		o.__vdomKey__ = vdom__$Attr_Key_$Impl_$.keygen++;
	}
	return o.__vdomKey__;
};
var vdom__$VNode_VNode_$Impl_$ = {};
vdom__$VNode_VNode_$Impl_$.__name__ = true;
vdom__$VNode_VNode_$Impl_$.flatten = function(c) {
	return c;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var vdom_VDom = function(e){return e()}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":15}],2:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":35}],3:[function(require,module,exports){
var h = require("./virtual-hyperscript/index.js")

module.exports = h

},{"./virtual-hyperscript/index.js":22}],4:[function(require,module,exports){
var diff = require("./diff.js")
var patch = require("./patch.js")
var h = require("./h.js")
var create = require("./create-element.js")
var VNode = require('./vnode/vnode.js')
var VText = require('./vnode/vtext.js')

module.exports = {
    diff: diff,
    patch: patch,
    h: h,
    create: create,
    VNode: VNode,
    VText: VText
}

//for (var name in module.exports)
	//window[name] = module.exports[name];

},{"./create-element.js":1,"./diff.js":2,"./h.js":3,"./patch.js":13,"./vnode/vnode.js":31,"./vnode/vtext.js":33}],5:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
'use strict';

var OneVersionConstraint = require('individual/one-version');

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

module.exports = EvStore;

function EvStore(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

},{"individual/one-version":9}],8:[function(require,module,exports){
(function (global){
'use strict';

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual;

function Individual(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],9:[function(require,module,exports){
'use strict';

var Individual = require('./index.js');

module.exports = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

},{"./index.js":8}],10:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":6}],11:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],12:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],13:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":18}],14:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":26,"is-object":11}],15:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":24,"../vnode/is-vnode.js":27,"../vnode/is-vtext.js":28,"../vnode/is-widget.js":29,"./apply-properties":14,"global/document":10}],16:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],17:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = renderOptions.render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = renderOptions.render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":29,"../vnode/vpatch.js":32,"./apply-properties":14,"./update-widget":19}],18:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var render = require("./create-element")
var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches, renderOptions) {
    renderOptions = renderOptions || {}
    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch
        ? renderOptions.patch
        : patchRecursive
    renderOptions.render = renderOptions.render || render

    return renderOptions.patch(rootNode, patches, renderOptions)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions.document && ownerDocument !== document) {
        renderOptions.document = ownerDocument
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./create-element":15,"./dom-index":16,"./patch-op":17,"global/document":10,"x-is-array":12}],19:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":29}],20:[function(require,module,exports){
'use strict';

var EvStore = require('ev-store');

module.exports = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

},{"ev-store":7}],21:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],22:[function(require,module,exports){
'use strict';

var isArray = require('x-is-array');

var VNode = require('../vnode/vnode.js');
var VText = require('../vnode/vtext.js');
var isVNode = require('../vnode/is-vnode');
var isVText = require('../vnode/is-vtext');
var isWidget = require('../vnode/is-widget');
var isHook = require('../vnode/is-vhook');
var isVThunk = require('../vnode/is-thunk');

var parseTag = require('./parse-tag.js');
var softSetHook = require('./hooks/soft-set-hook.js');
var evHook = require('./hooks/ev-hook.js');

module.exports = h;

function h(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText(c));
    } else if (typeof c === 'number') {
        childNodes.push(new VText(String(c)));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode)
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

},{"../vnode/is-thunk":25,"../vnode/is-vhook":26,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vnode.js":31,"../vnode/vtext.js":33,"./hooks/ev-hook.js":20,"./hooks/soft-set-hook.js":21,"./parse-tag.js":23,"x-is-array":12}],23:[function(require,module,exports){
'use strict';

var split = require('browser-split');

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/;
var notClassId = /^\.|#/;

module.exports = parseTag;

function parseTag(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

},{"browser-split":5}],24:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":25,"./is-vnode":27,"./is-vtext":28,"./is-widget":29}],25:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],26:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],27:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":30}],28:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":30}],29:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],30:[function(require,module,exports){
module.exports = "2"

},{}],31:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":25,"./is-vhook":26,"./is-vnode":27,"./is-widget":29,"./version":30}],32:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":30}],33:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":30}],34:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":26,"is-object":11}],35:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free      // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":24,"../vnode/is-thunk":25,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vpatch":32,"./diff-props":34,"x-is-array":12}]},{},[4])(4)
});
coconut_ui_View.idCounter = 0;
coconut_ui_tools_ViewCache.stack = [];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
tetris_data_Constants.BOARD_HEIGHT = 20;
tetris_data_Constants.BOARD_WIDTH = 10;
tetris_data_Constants.FRAME_TIME = 300;
tetris_data_Constants.LOCKED_CSS_CLASS = "shape-locked";
tink_pure__$List_Node.EMPTY = [];
O.stack = new List();
O.scheduled = [];
O.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
O.isScheduled = false;
tink_state_ConstObservable.NEVER = (function($this) {
	var $r;
	var this1 = new tink_core__$Future_SimpleFuture(function(_) {
		return null;
	});
	$r = this1;
	return $r;
}(this));
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tetris_data_Shapes.I = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]],[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],[[0,0,1,0],[0,0,1,0],[0,0,1,0],[0,0,1,0]],[[0,0,0,0],[0,0,0,0],[1,1,1,1],[0,0,0,0]]]), className : "shape-i"});
tetris_data_Shapes.J = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,1,0,0],[0,1,0,0],[1,1,0,0],[0,0,0,0]],[[1,0,0,0],[1,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,1,1,0],[0,1,0,0],[0,1,0,0],[0,0,0,0]],[[0,0,0,0],[1,1,1,0],[0,0,1,0],[0,0,0,0]]]), className : "shape-j"});
tetris_data_Shapes.L = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,1,0,0],[0,1,0,0],[0,1,1,0],[0,0,0,0]],[[0,0,0,0],[1,1,1,0],[1,0,0,0],[0,0,0,0]],[[1,1,0,0],[0,1,0,0],[0,1,0,0],[0,0,0,0]],[[0,0,1,0],[1,1,1,0],[0,0,0,0],[0,0,0,0]]]), className : "shape-l"});
tetris_data_Shapes.O = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0]]]), className : "shape-o"});
tetris_data_Shapes.S = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,0,0,0],[0,1,1,0],[1,1,0,0],[0,0,0,0]],[[1,0,0,0],[1,1,0,0],[0,1,0,0],[0,0,0,0]],[[0,1,1,0],[1,1,0,0],[0,0,0,0],[0,0,0,0]],[[0,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0]]]), className : "shape-s"});
tetris_data_Shapes.T = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,0,0,0],[1,1,1,0],[0,1,0,0],[0,0,0,0]],[[0,1,0,0],[1,1,0,0],[0,1,0,0],[0,0,0,0]],[[0,1,0,0],[1,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,1,0,0],[0,1,1,0],[0,1,0,0],[0,0,0,0]]]), className : "shape-t"});
tetris_data_Shapes.Z = new tetris_data_Shape({ blocks : tetris_data_Shape.toList([[[0,0,0,0],[1,1,0,0],[0,1,1,0],[0,0,0,0]],[[0,1,0,0],[1,1,0,0],[1,0,0,0],[0,0,0,0]],[[1,1,0,0],[0,1,1,0],[0,0,0,0],[0,0,0,0]],[[0,0,1,0],[0,1,1,0],[0,1,0,0],[0,0,0,0]]]), className : "shape-z"});
vdom__$Attr_Key_$Impl_$.keygen = 0;
Tetris.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
